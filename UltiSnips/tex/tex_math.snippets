global !p
from usnip_helpers import *
from usnip_contexts import *
from usnip_tex_contexts import * 	

# def alphas_range = "a-zA-Zα-ωΑ-Ωϵϕϑϖϱ"

tex_unicode_input = vim.vars.get('tex_unicode_input')

endglobal

# sub/superscripts
# ----------------
context "math()"
snippet __ "_{}" iA
_{${1:${VISUAL}}}
endsnippet

context "math()"
snippet uu "_{}" iA
_{${1:${VISUAL}}}
endsnippet

context "math()"
snippet ^^ "^{}" iA
^{${1:${VISUAL}}}
endsnippet

context "math()"
snippet yy "^{}" i
^{${1:${VISUAL}}}
endsnippet

context "math()"
snippet uy "_{}^{}" i
_{$1}^{$2}
endsnippet

context "math()"
snippet yu "^{}_{}" i
^{$1}_{$2}
endsnippet


# sub/superscripts with (.)
# -------------------------
context "math()"
snippet ^( "^{(.)}" iA
^{(${1:${VISUAL}})}
endsnippet

context "math()"
snippet yo "^{(.)}" i
^{(${1:${VISUAL}})}
endsnippet

context "math()"
snippet _( "_{(.)}" iA
_{(${1:${VISUAL}})}
endsnippet

context "math()"
snippet uo "_{(.)}" i
_{(${1:${VISUAL}})}
endsnippet


# symbols
# -------
context "math()"
snippet ,., ",\dots," iA
, \dots, 
endsnippet

context "math()"
snippet nft "\infty" wA
`!p snip.rv = '∞' if tex_unicode_input else '\\infty'`
endsnippet


# relations
# ---------
context "math()"
snippet xx "\times" A
`!p snip.rv = '×' if tex_unicode_input else '\\times'`
endsnippet

context "math()"
snippet c. "\cdot" 
`!p snip.rv = '⋅' if tex_unicode_input else '\\cdot'`
endsnippet

context "math()"
snippet b. "bullet operator" 
`!p snip.rv = '∙' if tex_unicode_input else '\\vysmblkcircle'`
endsnippet

context "math()"
snippet ~~ "~" A
\sim
endsnippet

context "math()"
snippet lte "\leq, less than or equal" iA
\leq
endsnippet

context "math()"
snippet gte "\geq, greater than or equal" iA
\geq
endsnippet


# arpeggio mappings
# -----------------
# see .vim/after/ftplugin/tex/brackets_arpeggio_tex.vim
#   dm -> \[ \] 
#   mk -> $  $
#   zf -> \{ \}


# common misc
# -----------
context "math()"
snippet inv "inverse ^{-1}" i
^{-1}
endsnippet

context "math()"
snippet bin "binom{}{}"
\binom{${1:n}}{${2:k}}
endsnippet

context "math()"
snippet te "\text" i
\text{${1:${VISUAL}}}
endsnippet

# aligning equations
# ------------------
context "math()"
snippet == " &= (alignment)" A
&=
endsnippet

context "math()"
snippet \= "next line (\\) and &=" A

\\\\ &=
endsnippet

context "math()"
snippet "(\S.*)\\\\&" "\[ to \[ \begin{split}; = to &=" rA
\begin{split}
	`!p if not snip.c:
    	curline = match.group(1)
    	snip.rv = curline.replace("=", "&=", 1)
	`
	\\\\ &= ${1}
\end{split}
endsnippet


# fractions
# ---------
context "math()"
snippet // "frac{}{}" wA
\frac{${1:${VISUAL:n}}}{${2:d}}
endsnippet

context "math()"
post_expand "jump_forward(snip, 1)"
priority 10
snippet 1// "frac{1}{}" wA
\frac{${1:1}}{${2:${VISUAL:d}}}
endsnippet

# eg. 2n// -> \frac{2n}{|}
#     a t^2//2 -> a \frac{t^2}{2}
context "math()"
post_expand "jump_forward(snip, 1)"
priority 2
snippet "([^ \t\)\]\}]+)//" "frac{n}{}" rA
\frac{${1:`!p snip.rv = match.group(1)`}}{${2:d}}
endsnippet



# operators
# ---------
context "math()"
snippet sm "sum without limits" A
\sum
endsnippet

# -- press trigger after sm to include limits
context "math()"
snippet \sum "sum_{}^{}"
\sum_{${1:i=1}}^{${2:n}} $0
endsnippet

context "math()"
snippet int "int without limits" A
\int
endsnippet

# -- press trigger after int to include limits
context "math()"
snippet \int "int_{}^{}"
\int_{${1}}^{${2}} $0
endsnippet

context "math()"
post_expand "jump_forward(snip, 1)"
snippet pp "partial deriv" i
\frac{\partial$1}{\partial $2} $0
endsnippet


# math accents
# ------------

# accents for \bar, \hat, \tilde (til), and \breve (brv)
# eg.  til -> tilde{.}
#     Xtil -> tilde{X}    (postfix)
#  \symtil -> tilde{\sym} (postfix)

priority 10
context "math()"
# \overline{$1}$0
snippet "(?<!\\)bar" "bar" r
\bar{${1:${VISUAL}}}$0
endsnippet

priority 20
context "math()"
snippet "([a-zA-Zα-ωΑ-Ωϵϕϑϖϱ])bar" "bar_postfix_alpha" riA
\bar{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "(\\[a-zA-Z]+)bar" "bar_postfix_\sym" riA
\bar{`!p snip.rv=match.group(1)`}
endsnippet


priority 10
context "math()"
snippet "(?<!\\)hat" "hat" r
\hat{${1:${VISUAL}}}$0
endsnippet

priority 20
context "math()"
snippet "([a-zA-Zα-ωΑ-Ωϵϕϑϖϱ])hat" "hat_postfix_alpha" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "(\\[a-zA-Z]+)hat" "hat_postfix_\sym" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet


priority 10
context "math()"
snippet "(?<!\\)til" "tilde" r
\tilde{${1:${VISUAL}}}$0
endsnippet

priority 20
context "math()"
snippet "([a-zA-Zα-ωΑ-Ωϵϕϑϖϱ])til" "tilde_postfix_alpha" riA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "(\\[a-zA-Z]+)til" "tilde_postfix_\sym" riA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet


priority 10
context "math()"
snippet "(?<!\\)brv" "breve" r
\breve{${1:${VISUAL}}}$0
endsnippet

priority 20
context "math()"
snippet "([a-zA-Zα-ωΑ-Ωϵϕϑϖϱ])brv" "breve_postfix_alpha" riA
\breve{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "(\\[a-zA-Z]+)brv" "breve_postfix_\sym" riA
\breve{`!p snip.rv=match.group(1)`}
endsnippet


